(******************************************************************************)
(* A library for finite maps                                                  *)
(******************************************************************************)

(* ========================================================================== *)
(* Header                                                                     *)
(* ========================================================================== *)

declare {isabelle;ocaml;hol;coq} rename module = lem_map

open import Bool Basic_classes Function Maybe List Tuple Set Num
open import {hol} `finite_mapTheory` `finite_mapLib`

type map 'k 'v
declare ocaml    target_rep type map = `Pmap.map` 
declare isabelle target_rep type map = `Map.map` 
declare hol      target_rep type map = `fmap`
declare coq      target_rep type map = `fmap`



(* -------------------------------------------------------------------------- *)
(* Map equality.                                                              *)
(* -------------------------------------------------------------------------- *)

val mapEqual : forall 'k 'v. Eq 'k, Eq 'v => map 'k 'v -> map 'k 'v -> bool
val mapEqualBy : forall 'k 'v. ('k -> 'k -> bool) -> ('v -> 'v -> bool) -> map 'k 'v -> map 'k 'v -> bool

declare ocaml target_rep function mapEqualBy eq_k eq_v = `Pmap.equal` eq_v
declare coq target_rep function mapEqualBy = `fmap_equal_by`
let inline ~{hol;isabelle} mapEqual = mapEqualBy (=) (=)
let inline {hol;isabelle} mapEqual = unsafe_structural_equality

instance forall 'k 'v. Eq 'k, Eq 'v => (Eq (map 'k 'v))
  let (=) = mapEqual
  let (<>) m1 m2 = not (mapEqual m1 m2)
end


(* -------------------------------------------------------------------------- *)
(* Map type class                                                             *)
(* -------------------------------------------------------------------------- *)

class ( MapKeyType 'a ) 
  val {ocaml;coq} mapKeyCompare : 'a -> 'a -> ordering
end

default_instance forall 'a. SetType 'a => ( MapKeyType 'a ) 
  let mapKeyCompare = setElemCompare
end


(* -------------------------------------------------------------------------- *)
(* Empty maps                                                                 *)
(* -------------------------------------------------------------------------- *)

val empty : forall 'k 'v. MapKeyType 'k => map 'k 'v
val emptyBy : forall 'k 'v. ('k -> 'k -> ordering) -> map 'k 'v

declare ocaml target_rep function emptyBy = `Pmap.empty`

let inline {ocaml} empty = emptyBy mapKeyCompare
declare coq target_rep function empty = `fmap_empty`
declare hol target_rep function empty = `FEMPTY`
declare isabelle target_rep function empty = `Map.empty`


(* -------------------------------------------------------------------------- *)
(* Insertion                                                                  *)
(* -------------------------------------------------------------------------- *)

val insert    : forall 'k 'v. MapKeyType 'k => 'k -> 'v -> map 'k 'v -> map 'k 'v

declare coq      target_rep function insert = `fmap_add`
declare ocaml    target_rep function insert = `Pmap.add`
(* declare hol      target_rep function insert k v m = `FUPDATE` m (k,v) *)
declare hol      target_rep function insert k v m = special "%e |+ (%e, %e)" m k v

declare isabelle target_rep function insert = `map_update`


(* -------------------------------------------------------------------------- *)
(* Singleton                                                                  *)
(* -------------------------------------------------------------------------- *)

val singleton : forall 'k 'v. MapKeyType 'k => 'k -> 'v -> map 'k 'v
let inline singleton k v = insert k v empty

assert insert_equal_singleton: (mapEqual (insert (42 : nat) false empty) 
                                         (singleton 42 false))
assert commutative_insert_1: (mapEqual 
                              (insert (8 : nat) true  (insert 5 false empty))
                              (insert  5        false (insert 8 true empty)))
assert commutative_insert_2: (not (mapEqual
                              (insert (8 : nat) true  (insert 8 false empty))
                              (insert  8        false (insert 8 true empty))))



(* -------------------------------------------------------------------------- *)
(* Emptyness check                                                            *)
(* -------------------------------------------------------------------------- *)

val null  : forall 'k 'v. MapKeyType 'k, Eq 'k, Eq 'v => map 'k 'v -> bool
let inline null m = (m = empty)

declare coq target_rep function null = `fmap_is_empty`
declare ocaml target_rep function null = `Pmap.is_empty`

assert empty_null: (null (empty : map nat bool))


(* -------------------------------------------------------------------------- *)
(* lookup                                                                     *)
(* -------------------------------------------------------------------------- *)

val lookupBy : forall 'k 'v. ('k -> 'k -> ordering) -> 'k -> map 'k 'v -> maybe 'v
declare coq target_rep function lookupBy = `fmap_lookup_by`

val lookup          : forall 'k 'v. MapKeyType 'k => 'k -> map 'k 'v -> maybe 'v
let inline {coq} lookup = lookupBy mapKeyCompare
declare isabelle target_rep function lookup k m = ``m k
declare hol      target_rep function lookup k m = `FLOOKUP` m k
declare ocaml    target_rep function lookup = `Pmap.lookup`

assert lookup_insert_1: (lookup 16 (insert (16 : nat) true empty) = Just true)
assert lookup_insert_2: (lookup 16 (insert 36 false (insert (16 : nat) true empty)) = Just true )
assert lookup_insert_3: (lookup 36 (insert 36 false (insert (16 : nat) true empty)) = Just false )

assert lookup_empty_0: (lookup 25 (empty : map nat bool) = Nothing)
assert find_insert_0: (lookup 16 (insert (16 : nat) true empty) = Just true)

lemma lookup_empty : (forall k. lookup k empty = Nothing)
lemma lookup_insert: (forall k k' v m. lookup k (insert k' v m) = (if (k = k') then Just v else lookup k m))

(* -------------------------------------------------------------------------- *)
(* findWithDefault                                                            *)
(* -------------------------------------------------------------------------- *)

val findWithDefault : forall 'k 'v. MapKeyType 'k => 'k -> 'v -> map 'k 'v -> 'v
let inline findWithDefault k v m = fromMaybe v (lookup k m)

(* -------------------------------------------------------------------------- *)
(* from lists                                                                 *)
(* -------------------------------------------------------------------------- *)

val fromList  : forall 'k 'v. MapKeyType 'k => list ('k * 'v) -> map 'k 'v
let fromList l = foldl (fun m (k,v) -> insert k v m) empty l

declare isabelle target_rep function fromList l = `Map.map_of` (reverse l)
declare hol      target_rep function fromList l = `FUPDATE_LIST` `FEMPTY` l

assert fromList_0: (fromList [((2:nat), true);((3:nat), true);((4:nat), false)] =
                    fromList [((4:nat), false);((3:nat), true);((2:nat), true)])
(* later entries have priority *)
assert fromList_1: (fromList [((2:nat), true);((2:nat),false);((3:nat), true);((4:nat), false)] =
                    fromList [((4:nat), false);((3:nat), true);((2:nat), false)])


(* -------------------------------------------------------------------------- *)
(* to sets / domain / range                                                   *)
(* -------------------------------------------------------------------------- *)

val toSet : forall 'k 'v. MapKeyType 'k, SetType 'k, SetType 'v => map 'k 'v -> set ('k * 'v) 
val toSetBy : forall 'k 'v. (('k * 'v) -> ('k * 'v) -> ordering) -> map 'k 'v -> set ('k * 'v) 

declare ocaml    target_rep function toSetBy = `Pmap.bindings`
let inline {ocaml} toSet = toSetBy setElemCompare
declare isabelle target_rep function toSet = `map_to_set`
declare hol target_rep function toSet = `FMAP_TO_SET`
declare coq target_rep function toSet = `id`


assert toSet_0: (toSet (empty : map nat bool) = {})
assert toSet_1: (toSet (fromList [((2:nat), true);(3, true);(4, false)]) = 
                 {(2,true); (3, true); (4, false)})
assert toSet_2: (toSet (fromList [((2:nat), true);(3, true);(2,false); (4, false)]) = 
                 {(2,false); (3, true); (4, false)})


val domainBy : forall 'k 'v. ('k -> 'k -> ordering) -> map 'k 'v -> set 'k
val domain : forall 'k 'v. MapKeyType 'k, SetType 'k => map 'k 'v -> set 'k
declare ocaml    target_rep function domain = `Pmap.domain`
declare isabelle target_rep function domain = `Map.dom`
declare hol      target_rep function domain = `FDOM`
declare coq      target_rep function domainBy = `fmap_domain_by`
let inline {coq} domain = domainBy setElemCompare

assert domain_0: (domain (empty : map nat bool) = {})
assert domain_1: (domain (fromList [((2:nat), true);(3, true);(4, false)]) = 
                 {2; 3; 4})
assert domain_2: (domain (fromList [((2:nat), true);(3, true);(2,false); (4, false)]) = 
                 {2; 3; 4})


val range : forall 'k 'v. MapKeyType 'k, SetType 'v => map 'k 'v -> set 'v
val rangeBy : forall 'k 'v. ('v -> 'v -> ordering) -> map 'k 'v -> set 'v

declare ocaml    target_rep function rangeBy = `Pmap.range`
declare hol      target_rep function range = `FRANGE`
declare isabelle target_rep function range = `Map.ran`
declare coq      target_rep function rangeBy = `fmap_range_by`
let inline {ocaml;coq} range = rangeBy setElemCompare

assert range_0: (range (empty : map nat bool) = {})
assert range_1: (range (fromList [((2:nat), true);(3, true);(4, false)]) = 
                 {true; false})
assert range_2: (range (fromList [((2:nat), true);(3, true);(4, true)]) = {true})


(* -------------------------------------------------------------------------- *)
(* member                                                                     *)
(* -------------------------------------------------------------------------- *)

val member          : forall 'k 'v. MapKeyType 'k, SetType 'k, Eq 'k => 'k -> map 'k 'v -> bool
let inline member k m = k IN domain m
declare ocaml target_rep function member = `Pmap.mem`

val notMember       : forall 'k 'v. MapKeyType 'k, SetType 'k, Eq 'k => 'k -> map 'k 'v -> bool
let inline notMember k m = not (member k m)

assert member_insert_1: (member 16 (insert (16 : nat) true empty))
assert member_insert_2: (not (member 25 (insert (16 : nat) true empty)))
assert member_insert_3: (member 16 (insert 36 false (insert (16 : nat) true empty)))

lemma member_empty : (forall k. not (member k empty))
lemma member_insert: (forall k k' v m. member k (insert k' v m) = ((k = k') || member k m))

(* -------------------------------------------------------------------------- *)
(* Quantification                                                             *)
(* -------------------------------------------------------------------------- *)

val any : forall 'k 'v. MapKeyType 'k, Eq 'v => ('k -> 'v -> bool) -> map 'k 'v -> bool 
val all : forall 'k 'v. MapKeyType 'k, Eq 'v => ('k -> 'v -> bool) -> map 'k 'v -> bool 

let all P m = (forall k v. (P k v && (lookup k m = Just v)))
let inline any P m = not (all (fun k v -> not (P k v)) m)

declare ocaml target_rep function any = `Pmap.exist`
declare ocaml target_rep function all = `Pmap.for_all`
declare coq      target_rep function all = `fmap_all`
declare isabelle target_rep function any = `map_any`
declare isabelle target_rep function all = `map_all`
declare hol target_rep function all P = `FEVERY` (uncurry P)

assert any_0: (any (fun _k v -> v) (insert 36 false (insert (16 : nat) true empty)))
assert any_1: (not (any (fun _k v -> v) (insert 36 false (insert (16 : nat) false empty))))
assert any_2: (any (fun _k v -> not v) (insert 36 false (insert (16 : nat) true empty)))
assert any_3: (not (any (fun _k v -> not v) (insert 36 true (insert (16 : nat) true empty))))

assert all_0: (all (fun _k v -> v) (insert 36 true (insert (16 : nat) true empty)))
assert all_1: (not (all (fun _k v -> v) (insert 36 true (insert (16 : nat) false empty))))
assert all_2: (all (fun _k v -> not v) (insert 36 false (insert (16 : nat) false empty)))
assert all_3: (not (all (fun _k v -> not v) (insert 36 false (insert (16 : nat) true empty))))


(* -------------------------------------------------------------------------- *)
(* Set-like operations.                                                       *)
(* -------------------------------------------------------------------------- *)
val deleteBy         : forall 'k 'v. ('k -> 'k -> ordering) -> 'k -> map 'k 'v -> map 'k 'v
val delete           : forall 'k 'v. MapKeyType 'k => 'k -> map 'k 'v -> map 'k 'v
val deleteSwap      : forall 'k 'v. MapKeyType 'k => map 'k 'v -> 'k -> map 'k 'v

declare coq      target_rep function deleteBy = `fmap_delete_by`
declare ocaml    target_rep function delete = `Pmap.remove`
declare isabelle target_rep function delete = `map_remove`
declare hol      target_rep function deleteSwap = infix `\\`
let inline {hol} delete k m = deleteSwap m k
let inline {coq} delete = deleteBy mapKeyCompare
let inline {coq} deleteSwap m k = delete k m

assert delete_insert_1: (not (member (5 : nat) (delete 5 (insert 5 true empty))))
assert delete_insert_2:      (member (7 : nat) (delete 5 (insert 7 true empty)))
assert delete_delete: (null (delete (5 : nat) (delete (5 : nat) (insert 5 true empty))))

val (union)          : forall 'k 'v. MapKeyType 'k => map 'k 'v -> map 'k 'v -> map 'k 'v
declare coq      target_rep function (union) = (`@` `List.app` `_`)
declare ocaml    target_rep function (union) = `Pmap.union`
declare isabelle target_rep function (union) = infix `++`
declare hol      target_rep function (union) = `FUNION`

val unions           : forall 'k 'v. MapKeyType 'k => list (map 'k 'v) -> map 'k 'v
let inline unions = foldr (union) empty


(* -------------------------------------------------------------------------- *)
(* Maps (in the functor sense).                                               *)
(* -------------------------------------------------------------------------- *)

val map             : forall 'k 'v 'w. MapKeyType 'k => ('v -> 'w) -> map 'k 'v -> map 'k 'w

declare hol      target_rep function map = infix `o_f`
declare coq      target_rep function map = `fmap_map`
declare ocaml    target_rep function map = `Pmap.map`
declare isabelle target_rep function map = `map_image`

assert map_0 : (map (fun b -> not b) (insert (2:nat) true (insert (3:nat) false empty)) =
                insert (2:nat) false (insert (3:nat) true empty))


(* -------------------------------------------------------------------------- *)
(* Cardinality                                                                *)
(* -------------------------------------------------------------------------- *)
val size  : forall 'k 'v. MapKeyType 'k, SetType 'k => map 'k 'v -> nat
let inline size m = Set.size (domain m)

declare ocaml target_rep function size = `Pmap.cardinal`
declare hol   target_rep function size = `FCARD`

assert empty_size: (size (empty : map nat bool) = 0)
assert singleton_size: (size (singleton (2:nat) (3:nat)) = 1)
